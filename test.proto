// Copyright 2018 Improbable. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package improbable.grpcweb.test;

option go_package = "github.com/yannic/grpcweb/testproto";

import "google/protobuf/empty.proto";

message PingRequest {
  enum FailureType {
    NONE = 0;
    CODE = 1;
    DROP = 2;
    CODE_UNICODE = 3;
  }

  string value = 1;
  int32 response_count = 2;
  uint32 error_code_returned = 3;
  FailureType failure_type = 4;
  bool check_metadata = 5;
  bool send_headers = 6;
  bool send_trailers = 7;

  string stream_identifier = 8;
}

message PingResponse {
  string Value = 1;
  int32 counter = 2;
}

message TextMessage {
  string text = 1;
  bool send_headers = 2;
  bool send_trailers = 3;
}

service TestService {
  rpc PingEmpty(google.protobuf.Empty) returns (PingResponse) {}

  rpc Ping(PingRequest) returns (PingResponse) {}

  rpc PingError(PingRequest) returns (google.protobuf.Empty) {}

  rpc PingList(PingRequest) returns (stream PingResponse) {}

  rpc PingPongBidi(stream PingRequest) returns (stream PingResponse) {}

  rpc PingStream(stream PingRequest) returns (PingResponse) {}

  rpc Echo(TextMessage) returns (TextMessage) {}
}

message ContinueStreamRequest {
  string stream_identifier = 1;
}

message CheckStreamClosedRequest {
  string stream_identifier = 1;
}

message CheckStreamClosedResponse {
  bool closed = 1;
}

service TestUtilService {
  rpc ContinueStream(ContinueStreamRequest) returns (google.protobuf.Empty) {}

  rpc CheckStreamClosed(CheckStreamClosedRequest) returns (CheckStreamClosedResponse) {}
}

service FailService {
  rpc NonExistant(PingRequest) returns (PingResponse) {}
}